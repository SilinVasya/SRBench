/*
investigate
class Solution {
    func minGroups(_ intervals: [[Int]]) -> Int {
        var arr = Array(repeating: 0, count: 1_000_002)
        for interval in intervals {
            arr[interval[0]] += 1
            arr[interval[1] + 1] -= 1
        }

        var sum = 0
        var maxSum = 0
        for a in arr {
            sum += a
            maxSum = max(maxSum, sum)
        }

        return maxSum
    }
}
*/

class Solution {

    // [[5,10], [6,8], [1,5], [2,3], [1,10]]
    // [[1,5], [1,10], [2,3], [5,10], [6,8]]

    // 1, 1, 2, 5, 6
    // 3, 5, 8, 10, 10
    
    func minGroups(_ intervals: [[Int]]) -> Int {
        var starts = [Int]()
        starts.reserveCapacity(intervals.count)

        var ends = [Int]()
        ends.reserveCapacity(intervals.count)

        for interval in intervals {
            starts.append(interval[0])
            ends.append(interval[1])
        }

        starts.sort()
        ends.sort()

        var counter = 0

        var endI = 0

        for start in starts {
            if start > ends[endI] {
                endI += 1
            } else {
                counter += 1
            }
        }

        return counter
    }

    /*private struct Interval {
        let left: Int
        let right: Int
        var visited: Bool
    }

    func minGroups(_ intervals: [[Int]]) -> Int {
        var sortedIntervals = intervals
        .map { Interval(left: $0[0], right: $0[1], visited: false) }
        .sorted { interval1, interval2 in
            if interval1.left == interval2.left {
                return interval1.right < interval2.right
            }

            return interval1.left < interval2.left
        }

        var counter = 0
        for i in 0..<sortedIntervals.count {
            guard !sortedIntervals[i].visited else {
                continue
            }

            counter += 1
            var rightI = sortedIntervals[i].right

            for j in i + 1..<sortedIntervals.count {
                guard !sortedIntervals[j].visited else {
                    continue
                }

                if sortedIntervals[j].left > rightI {
                    sortedIntervals[j].visited = true
                    rightI = sortedIntervals[j].right
                }
            }
        }

        return counter
    }*/
}